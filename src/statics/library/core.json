[
  {
    "functionName": "GeoReproject",
    "blockName": "GeoReproject",
    "library": "geo",
    "description" : "This block converts geo coordinates from source coordinate system to the target one.",
    "inputs": [
      {
        "name": "srcCoordinateSystem",
        "type": "xs:string",
        "mandatory" : true,
        "description" : "Source coordinate system"
      },
      {
        "name": "targetCoordinateSystem",
        "type": "xs:string",
        "mandatory" : true,
        "description" : "Target coordinate system"
      },
      {
        "name": "strWKT",
        "type": "xs:string",
        "mandatory" : true,
        "description" : "Geo shape"
      }
    ],
    "outputs": [
      {
        "name": "strWKT",
        "type": "node",
        "description" : "Converted geo shape"
      }
    ],
    "function": {
      "ref": "fn.doc",
      "code": null
    }


  },
  {
    "functionName": "fn_doc",
    "blockName": "doc",
    "library": "fn",
    "inputs": [
      {
        "name": "uri",
        "type": "xs:string"
      }
    ],
    "outputs": [
      {
        "name": "doc",
        "type": "node"
      }
    ],
    "function": {
      "ref": "fn.doc",
      "code": null
    }


  },
  {
    "functionName": "fn_collection",
    "blockName": "collection",
    "library": "fn",
    "inputs": [
      {
        "name": "collectionName",
        "type": "xs:string"
      }
    ],
    "outputs": [
      {
        "name": "docs",
        "type": "node()*"
      }
    ],
    "function": {
      "ref": "fn.collection",
      "code": null
    }


  },
  {
    "functionName": "fn_baseUri",
    "blockName": "baseUri",
    "library": "fn",
    "inputs": [
      {
        "name": "node",
        "type": "node"
      }
    ],
    "outputs": [
      {
        "name": "uri",
        "type": "xs:string"
      }
    ],
    "function": {
      "ref": "fn.baseUri",
      "code": null
    }


  },
  {
    "functionName": "fn_head",
    "blockName": "head",
    "library": "fn",
    "inputs": [
      {
        "name": "nodes",
        "type": null
      }
    ],
    "outputs": [
      {
        "name": "node",
        "type": null
      }
    ],
    "function": {
      "ref": "fn.head",
      "code": null
    }


  },
  {
    "functionName": "FormatDate",
    "blockName": "FormatDate",
    "library": "date",
    "description": "This blocks formats the input date to ISO format using the provided format",
    "inputs": [
      {
        "name": "inputDate",
        "type": "xs:string"
      }
    ],

    "widgets": [
      {
        "type": "text",
        "name": "format",
        "default": "DD/MM/YYYY",
        "values": []

      }

    ],
    "outputs": [
      {
        "name": "IsoDate",
        "type": "xs:string"
      }
    ],
    "function": {
      "ref": null,
      "code": null
    }
  },
  {
    "functionName": "CreateTriple",
    "blockName": "CreateTriple",
    "library": "triples",
    "description": "This block creates a triple using the provided subject, predicate, object",
    "inputs": [
      {
        "name": "subject",
        "type": "xs:string"
      },
      {
        "name": "object",
        "type": "xs:string"
      }
    ],

    "widgets": [

      {
        "type": "toggle",
        "name": "subjectIsIRI",
        "default": true,
        "values": []

      },
      {
        "type": "text",
        "name": "predicate",
        "default": "myPredicate",
        "values": []

      },
      {
        "type": "toggle",
        "name": "objectIsIRI",
        "default": true,
        "values": []

      }

    ],
    "outputs": [
      {
        "name": "triple",
        "type": null
      }
    ],
    "function": {
      "ref": null,
      "code": null
    }
  },
  {
    "functionName": "Split",
    "blockName": "Split",
    "library": "string",
    "description" : "This block splits the input string using the provided char.",
    "inputs": [
      {
        "name": "string",
        "type": null
      }
    ],

    "widgets": [
      {
        "type": "text",
        "name": "splitChar",
        "default": "/",
        "values": []

      }],
    "outputs": [
      {
        "name": "v1",
        "type": null
      },
      {
        "name": "v2",
        "type": null
      },
      {
        "name": "v3",
        "type": null
      },
      {
        "name": "array",
        "type": null
      }
    ],
    "function": {
      "ref": null,
      "code": ""
    }
  },
  {
    "functionName": "FormatDateAuto",
    "blockName": "FormatDateAuto",
    "library": "date",
    "description": "This blocks formats the input date to ISO format using MM-DD-YYYY, YYYY-MM-DD, DD/MM/YYYY",
    "inputs": [
      {
        "name": "inputDate",
        "type": "xs:string"
      }
    ],
    "outputs": [
      {
        "name": "IsoDate",
        "type": "xs:string"
      }
    ],
    "function": {
      "ref": null,
      "code": ""
    }
  },
  {
    "functionName": "Lookup",
    "blockName": "Lookup",
    "library": "feature",
    "inputs": [
      {
        "name": "query",
        "type": null
      },
      {
        "name": "var1",
        "type": null
      },
      {
        "name": "var2",
        "type": null
      }

    ],
    "properties": [

      {
        "name": "ctsQuery",
        "type": "cts.collectionQuery(\"${var1}\")"
      }

    ],

    "widgets": [
      {
        "type": "text",
        "name": "query",
        "default": "cts.collectionQuery(\"${var1}\")",
        "values": []

      },

      {
        "type": "text",
        "name": "valuePath",
        "default": "/path/to/value/string()",
        "values": []

      }],

    "outputs": [
      {
        "name": "value",
        "type": null
      }
    ],
    "function": {
      "ref": null,
      "code": ""
    }
  },
  {
    "functionName": "ExpertQueryBuilder",
    "blockName": "ExpertQueryBuilder",
    "library": "cts",
    "inputs": [
      {
        "name": "v0",
        "type": null
      },
      {
        "name": "v1",
        "type": null
      }

    ],
    "properties": [

      {
        "name": "ctsQuery",
        "type": "cts.collectionQuery(\"${v0}\")"
      }

    ],

    "widgets": [
      {
        "type": "text",
        "name": "nbInputs",
        "default": "2",
        "values": [],
        "callback": "let nb = this.inputs.length;for(let i=0;i<nb;i++) {this.removeInput(0);};for(let i=0;i<parseInt(v);i++) this.addInput('v' + i,null);"


      }
     ],

    "outputs": [
      {
        "name": "ctsQuery",
        "type": null
      }
    ],
    "function": {
      "ref": null,
      "code": ""
    }
  },
  {
    "functionName": "FormatDateTimeAuto",
    "blockName": "FormatDateTimeAuto",
    "library": "date",
    "description" : "This block formats input datetime to ISO format using predefined formats (momentjs)",
    "inputs": [
      {
        "name": "inputDateTime",
        "type": "xs:string"
      }
    ],
    "outputs": [
      {
        "name": "IsoDateTime",
        "type": "xs:string"
      }
    ],
    "function": {
      "ref": null,
      "code": null
    }
  },

  {
    "functionName": "fn_upperCase",
    "blockName": "UpperCase",
    "library": "string",
    "inputs": [
      {
        "name": "string",
        "type": "xs:string"
      }
    ],
    "outputs": [
      {
        "name": "STRING",
        "type": "xs:string"
      }
    ],
    "function": {
      "ref": "fn.upperCase",
      "code": null
    }


  },
  {
    "functionName": "fn_lowerCase",
    "blockName": "LowerCase",
    "library": "string",
    "inputs": [
      {
        "name": "STRING",
        "type": "xs:string"
      }
    ],
    "outputs": [
      {
        "name": "string",
        "type": "xs:string"
      }
    ],
    "function": {
      "ref": "fn.lowerCase",
      "code": null
    }


  }
,
  {
    "functionName": "fn_count",
    "blockName": "count",
    "library": "fn",
    "inputs": [
      {
        "name": "list",
        "type": null
      }
    ],
    "outputs": [
      {
        "name": "nbItems",
        "type": "number"
      }
    ],
    "function": {
      "ref": "fn.count",
      "code": null
    }


  },
  {
    "functionName": "cts_andQuery",
    "blockName": "andQuery",
    "library": "cts",
    "inputs": [
      {
        "name": "query1",
        "type": "cts:query"
      },
      {
        "name": "query2",
        "type": "cts:query"
      },
      {
        "name": "query3",
        "type": "cts:query"
      },
      {
        "name": "query4",
        "type": "cts:query"
      }
    ],
    "outputs": [
      {
        "name": "query",
        "type": "cts:query"
      }
    ],
    "function": {
      "ref": null,
      "code": ""
    }


  },
  {
    "functionName": "cts_orQuery",
    "blockName": "orQuery",
    "library": "cts",
    "inputs": [
      {
        "name": "query1",
        "type": "cts:query"
      },
      {
        "name": "query2",
        "type": "cts:query"
      },
      {
        "name": "query3",
        "type": "cts:query"
      },
      {
        "name": "query4",
        "type": "cts:query"
      }
    ],
    "outputs": [
      {
        "name": "query",
        "type": "cts:query"
      }
    ],
    "function": {
      "ref": null,
      "code": ""
    }


  },
  {
    "functionName": "cts_search",
    "blockName": "search",
    "library": "cts",
    "inputs": [
      {
        "name": "query",
        "type": "cts:query"
      }
    ],
    "outputs": [
      {
        "name": "results",
        "type": ""
      }
    ],
    "function": {
      "ref": "cts.search",
      "code": null
    }


  },
  {
    "functionName": "fn_stringJoin",
    "blockName": "String join",
    "library": "string",
    "description" : "This block joins the input array of strings using the provided separator",
    "inputs": [
      {
        "name": "string*",
        "type": "xs:string*"
      }
    ],
    "properties": [
      {
        "name": "separator",
        "type": "xs:string"
      }

    ],
    "outputs": [
      {
        "name": "joinedString",
        "type": "xs:string"
      }
    ],
    "function": {
      "ref": "fn.stringJoin",
      "code": null
    }
  },
  {
    "functionName": "mapValues",
    "blockName": "Map values",
    "library": "string",
    "description" : "This block maps an input value to another using the configuration of the block (double click)",
    "inputs": [
      {
        "name": "value",
        "type": "xs:string"
      }
    ],
    "properties": [
      {
        "name": "mapping",
        "type": [{"source": "#NULL#", "target": "#NULL#"},
          {"source": "#EMPTY#", "target": "#EMPTY#"}
        ]
      }

    ],
    "widgets": [
      {
        "type": "combo",
        "name": "castOutput",
        "default": "string",
        "values": ["string","bool"]

      }

    ],
    "outputs": [
      {
        "name": "mappedValue",
        "type": "xs:string"
      }
    ],
    "function": {
      "ref": null,
      "code": ""


  }
}
,
  {
    "functionName": "cts_collectionQuery",
    "blockName": "collectionQuery",
    "library": "cts",
    "inputs": [
      {
        "name": "collectionName",
        "type": "xs:string"
      }
    ],
    "outputs": [
      {
        "name": "query",
        "type": "cts:query"
      }
    ],
    "function": {
      "ref": "cts.collectionQuery",
      "code": null
    }


  },
  {
    "functionName": "JsonValidate",
    "blockName": "JsonValidate",
    "library": "controls",
    "description": "This block validates the input Json  according to the provided schema (URI) in schema DB",
    "inputs": [
      {
        "name": "node",
        "description": "Node to be validated",
        "type": null
      },
      {
        "name": "schema",
        "description": "URI of the json schema in the schema DB",
        "type": null
      }
    ],
    "outputs": [
      {
        "name": "results",
        "type": "node"
      }
    ],
    "function": {
      "ref": null,
      "code": null
    }


  },
  {
    "functionName": "XMLValidate",
    "blockName": "XMLValidate",
    "library": "controls",
    "description": "this block validates the XML input according to the schemas in schema DB",
    "inputs": [
      {
        "name": "node",
        "type": null
      }
    ],
    "outputs": [
      {
        "name": "results",
        "type": null
      }
    ],
    "function": {
      "ref": null,
      "code": null
    }


  },
  {
    "functionName": "schematron_validate",
    "blockName": "Schematron validation*",
    "library": "controls",
    "inputs": [
      {
        "name": "doc",
        "type": null
      }
    ],
    "outputs": [
      {
        "name": "SVRL",
        "type": "node"
      }
    ],
    "function": {
      "ref": null,
      "code": null
    }


  },
  {
    "functionName": "isNumber",
    "blockName": "isNumber*",
    "library": "controls",
    "inputs": [
      {
        "name": "value",
        "type": null
      }
    ],
    "outputs": [
      {
        "name": "status",
        "type": "bool"
      }
    ],
    "function": {
      "ref": null,
      "code": null
    }


  },
  {
    "functionName": "isDate",
    "blockName": "isDate*",
    "library": "controls",
    "inputs": [
      {
        "name": "value",
        "type": null
      }
    ],
    "outputs": [
      {
        "name": "status",
        "type": "bool"
      }
    ],
    "function": {
      "ref": null,
      "code": null
    }


  },
  {
    "functionName": "isInDictionnary",
    "blockName": "isInDictionnary*",
    "library": "controls",
    "inputs": [
      {
        "name": "value",
        "type": null
      }
    ],
    "outputs": [
      {
        "name": "status",
        "type": "bool"
      }
    ],
    "function": {
      "ref": null,
      "code": null
    }


  },
  {
    "functionName": "checkRequiredFields",
    "blockName": "checkRequiredFields*",
    "library": "controls",
    "inputs": [
      {
        "name": "node",
        "type": null
      }
    ],
    "outputs": [
      {
        "name": "status",
        "type": "bool"
      }
    ],
    "function": {
      "ref": null,
      "code": null
    }


  }
,
  {
    "functionName": "jsonPropertyValueQuery",
    "blockName": "jsonPropertyValueQuery",
    "library": "cts",
    "inputs": [
      {
        "name": "property",
        "type": "xs:string"
      },
      {
        "name": "value",
        "type": "xs:string"
      }
    ],


    "widgets": [

      {
        "type": "combo",
        "name": "case",
        "default": "",
        "values": ["","case-sensitive","case-insensitive"]

      }, {
        "type": "combo",
        "name": "diacritic",
        "default": "",
        "values": ["","diacritic-sensitive","diacritic-insensitive"]

      }, {
        "type": "combo",
        "name": "punctuation",
        "default": "",
        "values": ["","punctuation-sensitive","punctuation-insensitive"]

      }, {
        "type": "combo",
        "name": "whitespace",
        "default": "",
        "values": [ "","whitespace-sensitive", "whitespace-insensitive"]

      }, {
        "type": "combo",
        "name": "stemming",
        "default": "",
        "values": [ "","stemmed", "unstemmed"]

      }, {
        "type": "combo",
        "name": "wildcard",
        "default": "",
        "values": [ "","wildcarded", "unwildcarded"]



      }, {
        "type": "combo",
        "name": "exact",
        "default": "",
        "values": [ "","exact"]

      }
    ],
    "outputs": [
      {
        "name": "query",
        "type": "cts:query"
      }
    ],
    "function": {
      "ref": "cts.jsonPropertyValueQuery",
      "code": null
    }


  }
,

  {
    "functionName": "applyXSLT",
    "blockName": "ApplyXSLT",
    "library": "transform",
    "description" : "This block applies the input XSL to the input node. XSL can be a string or the URI in module DB of the XSL",
    "inputs": [
      {
        "name": "node",
        "type": null
      },
      {
        "name": "xslStr",
        "type": null
      },
      {
        "name": "xslPath",
        "type": null
      }

    ],
    "outputs": [

      {
        "name": "doc",
        "type": "node"
      }
    ],
    "function": {
      "ref": null,
      "code": ""
    }

  },
  {
    "functionName": "ctsDoc",
    "blockName": "Doc",
    "library": "cts",
    "inputs": [
      {
        "name": "uri",
        "type": null
      }

    ],
    "outputs": [

      {
        "name": "doc",
        "type": "node"
      }
    ],
    "function": {
      "ref": null,
      "code": ""
    }

  },
  {
    "functionName": "addProperty",
    "blockName": "Add property",
    "library": "transform",
    "inputs": [
      {
        "name": "doc",
        "type": "node"
      },
      {
        "name": "value",
        "type": null
      }

    ],

    "properties": [
      {
        "name": "propertyName",
        "type": "Property name"
      }

    ],
    "outputs": [

      {
        "name": "doc",
        "type": "node"
      }
    ],
    "function": {
      "ref": null,
      "code": ""
  }

},
  {
    "functionName": "array",
    "blockName": "Array",
    "library": "basic",
    "description" : "This block merges the inputs into an array. If one of the input is itself an array is will be flatten into the main array",
    "inputs": [

      {
        "name": "item1",
        "type": null
      }, {
        "name": "item2",
        "type": null
      }, {
        "name": "item3",
        "type": null
      }, {
        "name": "item4",
        "type": null
      }, {
        "name": "item5",
        "type" :null
      }

    ],
    "outputs": [

      {
        "name": "array",
        "type": null
      }
    ],
    "function": {
      "ref": null,
      "code": ""
    }

  },
  {
    "functionName": "declarativeMapper",
    "blockName": "declarativeMapper",
    "library": "dhf",
    "description" : "This block applies DHF 5.1 mapping to the input node",
    "inputs": [

      {
        "name": "node",
        "type": null
      }

    ],
    "widgets": [
      {
        "type": "text",
        "name": "MappingName",
        "default": "",
        "values": []

      },{
        "type": "text",
        "name": "MappingVersion",
        "default": "",
        "values": []

      },{
        "type": "toggle",
        "name": "WithInstanceRoot",
        "default": true,
        "values": []

      }

    ],
    "outputs": [

      {
        "name": "mappedNode",
        "type": null
      }
    ],
    "function": {
      "ref": null,
      "code": ""
    }

  },
  {
    "functionName": "uuidString",
    "blockName": "uuid",
    "library": "string",
    "description" : "This block generates an UUID string",
    "inputs": [],

    "widgets": [
      {
        "type": "text",
        "name": "prefix",
        "default": "/prefix/",
        "values": [],
        "description": "This value can be added as a prefix to the UUID"

      }

    ],
    "properties": [],
    "outputs": [

      {
        "name": "uuid",
        "type": null
      }
    ],
    "function": {
      "ref": null,
      "code": ""
    }

  },
  {
    "functionName": "provo",
    "blockName": "PROV-O structure",
    "library": "provenance",
    "description" : "This block generates provo triples based on the provided inputs.",
    "inputs": [
      {
        "name": "uri",
        "type": null,
        "mandatory": true,
        "description" : "URI of the source"
      },
      {
        "name": "DerivedFrom1",
        "type": null,
        "mandatory": false,
        "description" : "Optional derived from URI"
      },
      {
        "name": "DerivedFrom2",
        "type": null,
        "mandatory": false,
        "description" : "Optional derived from URI"
      },
      {
        "name": "DerivedFrom3",
        "type": null,
        "mandatory": false,
        "description" : "Optional derived from URI"
      },
      {
        "name": "GeneratedBy",
        "type": null,
        "mandatory": false,
        "description" : "Optional generated by URI"
      },
      {
        "name": "createdOn",
        "type": null,
        "mandatory": false,
        "description" : "Optional date"
      }
    ],
    "properties": [],
    "outputs": [
      {
        "name": "PROV-O",
        "type": "node"
      }
    ],
    "function": {
      "ref": null,
      "code": ""
    }
  },
  {
    "functionName": "EntityEnrichment",
    "blockName": "EntityEnrichment",
    "library": "string",
    "description" : "This block performs entity enrichment on the input string based on a dictionary",
    "inputs": [
      {
        "name": "string",
        "type": null,
        "mandatory" : true,
        "description" : "String to enrich"
      },
      {
        "name": "dictionary",
        "type": null,
        "mandatory" : true,
        "description" : "URI of a SKOS dictionary"
      }

    ],
    "properties": [],
    "outputs": [
      {
        "name": "enrichedString",
        "type": null,
        "description" : "Enriched string"
      }
    ],
    "function": {
      "ref": null,
      "code": ""
    }
  },
  {
    "functionName": "Highlight",
    "blockName": "Highlight",
    "library": "string",
    "description" : "This block applies MarkLogic highlight function to the input string",
    "inputs": [
      {
        "name": "string",
        "type": null
      },
      {
        "name": "query",
        "type": null
      },
      {
        "name": "highlightKeyword",
        "type": null
      }

    ],
    "properties": [],
    "outputs": [
      {
        "name": "enrichedString",
        "type": null
      }
    ],
    "function": {
      "ref": null,
      "code": ""
    }
  },
  {
    "functionName": "DistinctValues",
    "blockName": "DistinctValues",
    "library": "feature",
    "description" : "This block returns the distinct values of a property from the input (can be array or sequence with reasonable size",
    "inputs": [
      {
        "name": "array",
        "type": null
      }

    ],

    "widgets": [
      {
        "type": "text",
        "name": "xpath",
        "default": "//prop",
        "values": []

      }

    ],
    "properties": [],
    "outputs": [
      {
        "name": "distinctValues",
        "type": null
      }
    ],
    "function": {
      "ref": null,
      "code": ""
    }
  },
  {
    "functionName": "selectCase",
    "blockName": "selectCase",
    "library": "feature",
    "description" : "This block returns one of the inputX value depending on the value2Test input. The selection of inputX is done based on the block configuration (double click)",
    "inputs": [
      {
        "name": "value2Test",
        "type": null
      },
      {
        "name": "input0",
        "type": null
      },
      {
        "name": "input1",
        "type": null
      },
      {
        "name": "input2",
        "type": null
      }

    ],
    "properties": [
      {
        "name": "testCases",
        "type": "v1;0\nv2;1\nv3;2"
      }
    ],
    "widgets": [
      {
        "type": "text",
        "name": "nbInputs",
        "default": "3",
        "values": [],
        "callback": "let nb = this.inputs.length;for(let i=0;i<nb;i++) {this.removeInput(0);} this.addInput('value2Test',null);for(let i=0;i<parseInt(v);i++) this.addInput('input' + i,null);"


      }

    ],
    "outputs": [
      {
        "name": "value",
        "type": "node"
      }
    ],
    "function": {
      "ref": null,
      "code": ""
    }
  },
  {
    "functionName": "CheckPhoneNumber",
    "blockName": "CheckPhoneNumber",
    "library": "controls",
    "description" : "This blocks checks the provided phone number according to the country. It returns the reformatted phone number and the validation status",
    "inputs": [
      {
        "name": "phoneNumber",
        "type": null,
        "mandatory" : true
      },
      {
        "name": "countryISO2",
        "type": null,
        "mandatory" : true
      },
      {
        "name": "Uri",
        "type": null
      }



    ],
    "properties": [

    ],
    "widgets": [
      {
        "type": "combo",
        "name": "outputFormat",
        "default": "INTERNATIONAL",
        "values": ["NATIONAL","INTERNATIONAL","E164"]
      },
      {
        "type": "text",
        "name": "defaultCountry",
        "default": "FR",
        "values": null
      },
      {
        "type": "toggle",
        "name": "Output if invalid ?",
        "default": true,
        "values": null
      }

    ],
    "outputs": [
      {
        "name": "phoneNumber",
        "type": null
      },
      {
        "name": "countryCode",
        "type": null
      },
      {
        "name": "numberType",
        "type": null
      },
      {
        "name": "qualityResult",
        "type": null
      }
    ],
    "function": {
      "ref": null,
      "code": ""
    }
  }
]
